/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
grammar org.apache.ant.antdsl.xtext.AntDSL with org.eclipse.xtext.common.Terminals

generate antdsl "http://www.apache.org/ant/AntDSL"

EProject:
    {EProject}
    (
        ('name'    ':' name=NAME)?
      & ('default' ':' default=NAME)?
      & ('basedir' ':' basedir=STRING)?
    )
    ('namespaces' '{' namespaces+=ENamespace* '}')?
    tasks=ETaskLists?
    (targets+=ETarget | extensionPoints+=EExtensionPoint | macrodDefs+=EMacrodef)*;

ENamespace:
    name=NAME ':' uri=STRING;

EExtensionPoint:
    description=DOC? 'extension-point' name=NAME (('extensionOf' extensionsOf=ETargetList ('onMiss' onMissingExtensionPoint=STRING)? )?
        & ('depends' depends=ETargetList)? & ('if' if=EBoolExpr)? & ('unless' unless=EBoolExpr)?
    );

ETarget:
    description=DOC? 'target' name=NAME (('extensionOf' extensionsOf=ETargetList ('onMiss' onMissingExtensionPoint=STRING)? )?
        & ('depends' depends=ETargetList)? & ('if' if=EBoolExpr)? & ('unless' unless=EBoolExpr)?
    ) tasks=ETaskLists?;

ETaskLists:
    {ETaskLists}
    '{' tasks+=ETask* '}';

ETargetList:
    names+=NAME (',' names+=NAME)*;

ETask:
    EAssignment | EInnerElement | EBranch;

ENSName:
    (namespace=NAME ':')? name=NAME;

EArguments:
    arguments+=EArgument (',' arguments+=EArgument)*;

EArgument:
    name=NAME '=' value=STRING;

EInnerElements:
    '{' elements+=EInnerElement+ '}';

EInnerElement:
    name=ENSName '(' arguments=EArguments? (','? inners=EInnerElements)? ')';

EAssignment:
    EPropertyAssignment | EReferenceAssignment | ELocalAssignment;

EPropertyAssignment:
    'prop' name=NAME '=' value=EExpr;

EReferenceAssignment:
    'ref' name=NAME '=' value=EExpr;

ELocalAssignment:
    'local' name=NAME '=' value=EExpr;

EBranch:
    if=EConditionedTasks ('else' elseif+=EConditionedTasks )* ('else' else=ETaskLists)?;

EConditionedTasks:
    'if' '(' condition=EBoolExpr ')' tasks=ETaskLists;

EBoolExpr:
    EBoolXorExpr;

EBoolXorExpr returns EBoolExpr:
    EBoolOrExpr ({EBoolXorExpr.left=current} '^^' right=EBoolOrExpr)*;

EBoolOrExpr returns EBoolExpr:
    EBoolAndExpr ({EBoolOrExpr.left=current} '||' right=EBoolAndExpr)*;

EBoolAndExpr returns EBoolExpr:
    EBoolPrimaryExpr ({EBoolAndExpr.left=current} '&&' right=EBoolPrimaryExpr)*;

EBoolPrimaryExpr returns EBoolExpr:
     EInnerElement
   | '(' EBoolExpr ')'
   | EBoolNotExpr;

EBoolNotExpr returns EBoolNotExpr:
    '!' expr=EBoolExpr;

EExpr:
    EMultExpr;

EMultExpr returns EExpr:
    EAddExpr ({EMultExpr.left=current} '*' right=EAddExpr )*;

EAddExpr returns EExpr:
    EPrimaryExpr ({EAddExpr.left=current} '+' right=EPrimaryExpr)*;

EPrimaryExpr returns EExpr:
    EFuncExpr | ENumExpr | EStringExpr | EPropExpr;

EFuncExpr returns EFuncExpr:
    name=NAME '(' arguments+=EExpr (',' arguments+=EExpr)* ')';

ENumExpr returns ENumExpr:
    value=INT;

EStringExpr returns EStringExpr:
    value=STRING;

EPropExpr returns EPropExpr:
    property=PROPERTY;

EMacrodef:
    description=DOC? 'macrodef' name=NAME '(' attributes=EAttributes? ')' tasks=ETaskLists;

EAttributes:
    attributes+=EAttribute (',' attributes+=EAttribute)*;

EAttribute:
    EArgAttribute | ETextAttribute | EElementAttribute;

EArgAttribute:
    'arg' name=NAME ('=' default=STRING)?;

ETextAttribute:
    (optional ?= 'optional')? (trimmed ?= 'trimmed')? 'text' name=NAME;

EElementAttribute:
    (optional ?= 'optional')? (implicit ?= 'implicit')? 'element' name=NAME;

terminal NAME:
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;

terminal PROPERTY:
    '$' NAME;

terminal DOC:
    ( '%' !('\n'|'\r')* '\r'? '\n' )+;
