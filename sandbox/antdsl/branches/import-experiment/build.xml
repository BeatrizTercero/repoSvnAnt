<project name="ant-dsl" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="ivy.version" value="2.4.0-alpha" />

    <target name="-check-build-deps">
        <condition property="build-deps.exist">
            <and>
                <available file="${basedir}/build-deps/antlr-3.4-complete.jar" />
                <available file="${basedir}/build-deps/antlr3-task/ant-antlr3.jar" />
                <available file="${basedir}/build-deps/ivy-${ivy.version}.jar" />
                <available file="${basedir}/build-deps/apache-ant-1.9.0alpha-bin.zip" />
            </and>
        </condition>
        <mkdir dir="${user.home}/.ivy2/lib/" />
    </target>

    <target name="-download-build-deps" depends="-check-build-deps" unless="build-deps.exist">
        <mkdir dir="${basedir}/build-deps" />
        <get src="https://builds.apache.org/pview/job/Ivy/lastSuccessfulBuild/artifact/trunk/build/artifact/jars/ivy.jar" dest="${basedir}/build-deps/ivy-${ivy.version}.jar" usetimestamp="true" />
        <get src="http://antlr.org/download/antlr-3.4-complete.jar" dest="${basedir}/build-deps/antlr-3.4-complete.jar" usetimestamp="true" />
        <get src="http://www.antlr.org/share/1169924912745/antlr3-task.zip" dest="${basedir}/build-deps/antlr3-task.zip" usetimestamp="true" />
        <unzip src="${basedir}/build-deps/antlr3-task.zip" dest="${basedir}/build-deps/" />
        <get src="https://builds.apache.org/job/Ant_Nightly/lastSuccessfulBuild/artifact/trunk/distribution/binaries/apache-ant-1.9.0alpha-bin.zip" dest="${basedir}/build-deps/apache-ant-1.9.0alpha-bin.zip" usetimestamp="true" />
        <unzip src="${basedir}/build-deps/apache-ant-1.9.0alpha-bin.zip" dest="${basedir}/build-deps/" />
        <copy file="${basedir}/build-deps/apache-ant-1.9.0alpha/lib/ant.jar" tofile="${basedir}/org.apache.ant.antdsl/ant.jar" />
    </target>

    <target name="init" depends="-download-build-deps">
        <taskdef name="antlr3" classname="org.apache.tools.ant.antlr.ANTLR3">
            <classpath>
                <pathelement path="${basedir}/build-deps/antlr-3.4-complete.jar" />
                <pathelement path="${basedir}/build-deps/antlr3-task/ant-antlr3.jar" />
            </classpath>
        </taskdef>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${basedir}/build-deps/ivy-${ivy.version}.jar" />
    </target>

    <target name="ivy:configure" depends="init">
        <ivy:configure file="ivysettings.xml" />
    </target>

    <target name="get-deps" depends="init,ivy:configure" description="Download dependencies" >
        <ivy:resolve file="ivy-fixed.xml" conf="*" uncompress="true" />
        <!--ivy:retrieve conf="*" pattern="${basedir}/lib/[type]s/[artifact]_[revision](.[ext])" sync="true" uncompress="true" /-->
        <ivy:cachepath pathid="antruntime.classpath.ivy" conf="antruntime" type="jar" uncompress="true" osgi="true" />
        <ivy:cachepath pathid="generate.classpath.ivy" conf="generate" type="jar" uncompress="true" osgi="true" />
        <!-- Now we need to hack since we the ant trunk to build -->
        <path id="antruntime.classpath">
            <fileset dir="build-deps/apache-ant-1.9.0alpha/lib" includes="*.jar" />
            <path refid="antruntime.classpath.ivy" />
        </path>
        <path id="generate.classpath">
            <fileset dir="build-deps/apache-ant-1.9.0alpha/lib" includes="*.jar" />
            <path refid="generate.classpath.ivy" />
        </path>
        <echo message="${toString:antruntime.classpath}" file=".antruntime.classpath" />
        <echo message="${toString:generate.classpath}" file=".generate.classpath" />
    </target>

    <target name="-do-update-deps" depends="init,ivy:configure">
        <ivy:resolve file="ivy.xml" conf="*" uncompress="true" resolveId="antdsl-update-deps" />
        <ivy:fixdeps tofile="ivy-fixed.xml" resolveId="antdsl-update-deps" />
    </target>

    <target name="update-deps" depends="-do-update-deps,get-deps" description="Update dependencies (to be called on ivy.xml chnage)" />

    <target name="clean" description="Clean build artifacts">
        <delete dir="${basedir}/build" />
    </target>

    <target name="clean-gen" description="Clean generate files">
        <delete>
            <fileset dir="${basedir}/org.apache.ant.antdsl/src-gen" includes="*"/>
            <fileset dir="${basedir}/org.apache.ant.antdsl.ui/src-gen" includes="*"/>
            <fileset dir="${basedir}/org.apache.ant.antdsl.tests/src-gen" includes="*"/>
        </delete>
    </target>

    <target name="generate-antlr" depends="init" description="Generate the simple ANTLR parser">
        <mkdir dir="${basedir}/org.apache.ant.antdsl/src/org/apache/ant/antdsl/antlr" />
        <antlr3 target="${basedir}/org.apache.ant.antdsl/src/org/apache/ant/antdsl/AntDSL.g" outputdirectory="${basedir}/org.apache.ant.antdsl/src/org/apache/ant/antdsl/antlr" />
    </target>

    <target name="generate-xtext" description="Generate XText and Ecore files for the full plugin">
        <loadpath pathid="generate.classpath" file=".generate.classpath" />
        <java classname="org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher" dir="${basedir}/org.apache.ant.antdsl" fork="true" failonerror="true">
            <classpath>
                <pathelement path="${basedir}/org.apache.ant.antdsl/src/" />
                <path refid="generate.classpath" />
            </classpath>
            <arg line="src/org/apache/ant/antdsl/xtext/GenerateAntDSL.mwe2" />
        </java>
    </target>

    <target name="build" description="Full build of a antdsl jar">
        <loadpath pathid="antruntime.classpath" file=".antruntime.classpath" />
        <mkdir dir="${basedir}/build/classes" />
        <javac srcdir="${basedir}/org.apache.ant.antdsl/src/:${basedir}/org.apache.ant.antdsl/src-gen/:${basedir}/org.apache.ant.antdsl/xtend-gen" destdir="${basedir}/build/classes" debug="on" includeantruntime="false" source="1.6" target="1.6" classpathref="antruntime.classpath" />
        <copy todir="${basedir}/build/classes">
            <fileset dir="${basedir}/org.apache.ant.antdsl/src">
                <exclude name="*.java" />
            </fileset>
            <fileset dir="${basedir}/org.apache.ant.antdsl/src-gen">
                <exclude name="*.java" />
            </fileset>
            <fileset dir="${basedir}/org.apache.ant.antdsl/xtend-gen">
                <exclude name="*.java" />
            </fileset>
            <fileset dir="${basedir}/org.apache.ant.antdsl" includes="META-INF/**/*" />
        </copy>
        <jar destfile="${basedir}/build/antdsl.jar" basedir="${basedir}/build/classes" />
    </target>

    <target name="test-xtext" description="Test the run of an antdsl file with Xtext-generated parser">
        <loadpath pathid="antruntime.classpath" file=".antruntime.classpath" />
        <typedef classname="org.apache.ant.antdsl.xtext.AntDslXTextProjectHelper" name="antDslProjectHelper">
            <classpath>
                <pathelement path="${basedir}/build/antdsl.jar" />
                <path refid="antruntime.classpath" />
            </classpath>
        </typedef>
        <projecthelper>
            <antDslProjectHelper />
        </projecthelper>
        <ant antfile="test/build.ant" target="build" />
    </target>

    <target name="test-antlr" description="Test the run of an antdsl file with Xtext-generated parser">
        <loadpath pathid="antruntime.classpath" file=".antruntime.classpath" />
        <typedef classname="org.apache.ant.antdsl.antlr.AntDslAntlrProjectHelper" name="antDslProjectHelper">
            <classpath>
                <pathelement path="${basedir}/build/antdsl.jar" />
                <path refid="antruntime.classpath" />
            </classpath>
        </typedef>
        <projecthelper>
            <antDslProjectHelper />
        </projecthelper>
        <ant antfile="test/build.ant" target="build" />
    </target>

    <macrodef name="loadpath">
        <attribute name="pathid" />
        <attribute name="file" />
        <sequential>
            <path id="@{pathid}">
                <resourcelist>
                    <file file="@{file}" />
                    <filterchain>
                        <tokenfilter>
                            <replacestring from="${path.separator}" to="${line.separator}"/>
                        </tokenfilter>
                    </filterchain>
                </resourcelist>
            </path>
        </sequential>
    </macrodef>
</project>