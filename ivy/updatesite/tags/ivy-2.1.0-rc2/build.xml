<!--
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
-->
<project basedir=".">

    <property file="local.build.properties" />
    <property file="build.properties" />

    <property name="work.dir" value="${basedir}/work" />
    <property name="updatesite.dir" value="${basedir}/dist" />

    <target name="clean">
        <delete dir="${work.dir}" />
    </target>

    <!-- 
        ===================================================================================================================
        Targets to intialize an ant run with Eclipse. Will be used to manage the updatesite
        ===================================================================================================================    
      -->
    <target name="eclipse-startup-check">
        <fail message="An Eclipse install is needed to run the build. Set your Eclipse install dir into the baseLocation property." unless="baseLocation" />

        <condition property="eclipse.startup">
            <available file="${baseLocation}/startup.jar" />
        </condition>
    </target>

    <target name="eclipse-startup-classpath" depends="eclipse-startup-check" if="eclipse.startup">
        <property name="eclipse.classpath" value="${baseLocation}/startup.jar" />
    </target>

    <target name="eclipse-launcher-classpath" depends="eclipse-startup-check" unless="eclipse.startup">
        <!-- store path to newest launcher JAR in path id 'newest.equinox.launcher.path.id' -->
        <path id="newest.equinox.launcher.path.id">
            <first count="1">
                <sort>
                    <fileset dir="${baseLocation}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
                    <!-- Seems the default order is oldest > newest so we must reverse it.
                       The 'reverse' and 'date' comparators are in the internal antlib
                       org.apache.tools.ant.types.resources.comparators.
                    -->
                    <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                        <!-- 'date' inherits 'reverse's namespace -->
                        <date />
                    </reverse>
                </sort>
            </first>
        </path>

        <!-- turn the path into a property -->
        <property name="eclipse.classpath" refid="newest.equinox.launcher.path.id" />
    </target>

    <target name="eclipse-classpath" depends="eclipse-startup-classpath,eclipse-launcher-classpath">
        <echo message="Using equinox launcher jar: ${eclipse.classpath}" />
    </target>

    <!-- 
        ===================================================================================================================
    	Targets to install the plugins into the updatesite
        ===================================================================================================================    
      -->

    <macrodef name="osgi-version">
        <attribute name="jar" />
        <attribute name="outputproperty" />
        <sequential>
            <tstamp>
                <format property="tstamp.@{jar}" pattern="yyyyMMddhhmmss" locale="en,UK" />
            </tstamp>
            <property name="work.dir.@{jar}" value="${work.dir}/${tstamp.@{jar}}" />
            <mkdir dir="${work.dir.@{jar}}/jar" />
            <unzip overwrite="true" src="@{jar}" dest="${work.dir.@{jar}}" />
            <loadfile property="@{outputproperty}" srcFile="${work.dir.@{jar}}/META-INF/MANIFEST.MF">
                <filterchain>
                    <linecontains>
                        <contains value="Bundle-Version:" />
                    </linecontains>
                    <tokenfilter>
                        <replaceregex pattern="Bundle-Version: (.*)" replace="\1" flags="gi" />
                    </tokenfilter>
                    <striplinebreaks />
                </filterchain>
            </loadfile>
            <delete dir="${work.dir.@{jar}}" />
        </sequential>
    </macrodef>

    <target name="put-ivy-jar">
        <fail message="You have to specify the path to the jar via the property ivy.jar" unless="ivy.jar" />
        <!-- get the real OSGi version of the bundle -->
        <osgi-version jar="${ivy.jar}" outputproperty="ivy.version" />
        <!-- delete previously installed ivy bundles -->
        <delete dir="${updatesite.dir}">
            <include name="plugins/org.apache.ivy_*" />
            <include name="features/org.apache.ivy.feature*" />
        </delete>
        <!-- install the plugin -->
        <mkdir dir="${updatesite.dir}/plugins" />
        <copy file="${ivy.jar}" tofile="${updatesite.dir}/plugins/org.apache.ivy_${ivy.version}.jar" overwrite="true" />
    </target>

    <target name="generate-ivy-feature">
        <!-- now take care of the generation of the Ivy feature -->
        <!-- first generate a feature descriptor with the proper version -->
        <delete file="${work.dir}/feature.xml" />
        <copy file="ivy-feature-template/feature.xml" todir="${work.dir}">
            <filterset>
                <filter token="ivy.version" value="${ivy.version}" />
            </filterset>
        </copy>
        <!-- package the feature -->
        <mkdir dir="${updatesite.dir}/features" />
        <jar destfile="${updatesite.dir}/features/org.apache.ivy.feature_${ivy.version}.jar">
            <fileset dir="ivy-feature-template">
                <include name="feature.properties" />
                <include name="LICENCE" />
                <include name="NOTICE" />
            </fileset>
            <fileset dir="${work.dir}">
                <include name="feature.xml" />
            </fileset>
        </jar>
    </target>

    <target name="put-ivyde-jars">
        <fail message="You have to specify the path to the zip of the IvyDE distribution via the property ivyde.zip" unless="ivyde.zip" />
        <!-- delete previously installed ivyde bundles -->
        <delete dir="${updatesite.dir}">
            <include name="plugins/org.apache.ivyde*" />
            <include name="features/org.apache.ivyde*" />
        </delete>
        <!-- unzip -->
        <mkdir dir="${work.dir}/distrib" />
        <unzip src="${ivyde.zip}" dest="${work.dir}/distrib" />
        <!-- install the new binaries -->
        <copy todir="${updatesite.dir}">
            <fileset dir="${work.dir}/distrib">
                <include name="plugins/**" />
                <include name="features/**" />
            </fileset>
        </copy>
    </target>

    <target name="get-ivyde-version">
        <!-- get the path to the ivyde plugin -->
        <path id="ivyde.plugin.path.id">
            <first count="1">
                <fileset dir="${updatesite.dir}/plugins" includes="org.apache.ivyde*.jar" />
            </first>
        </path>
        <!-- turn the path into a property -->
        <property name="ivyde.plugin.path" refid="ivyde.plugin.path.id" />
        <!-- get the real OSGi version of the bundle -->
        <osgi-version jar="${ivyde.plugin.path}" outputproperty="ivyde.version" />
    </target>

    <target name="get-ivy-version">
        <!-- get the path to the ivyde plugin -->
        <path id="ivy.plugin.path.id">
            <first count="1">
                <fileset dir="${updatesite.dir}/plugins" includes="org.apache.ivy_*.jar" />
            </first>
        </path>
        <!-- turn the path into a property -->
        <property name="ivy.plugin.path" refid="ivy.plugin.path.id" />
        <!-- get the real OSGi version of the bundle -->
        <osgi-version jar="${ivy.plugin.path}" outputproperty="ivy.version" />
    </target>

    <target name="generate-site">
        <mkdir dir="${updatesite.dir}" />
        <copy file="${basedir}/site-template.xml" tofile="${updatesite.dir}/site.xml" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="MIRRORS_URL" value="${mirrors.url}" />
                    <token key="UPDATESITE_URL" value="${updatesite.url}" />
                    <token key="IVY_VERSION" value="${ivy.version}" />
                    <token key="IVYDE_VERSION" value="${ivyde.version}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <target name="install-ivy" depends="put-ivy-jar,generate-ivy-feature,get-ivyde-version,generate-site" description="Install an Ivy bundle into the updatesite" />

    <target name="install-ivyde" depends="put-ivyde-jars,get-ivyde-version,get-ivy-version,generate-site" description="Install IvyDE into the updatesite" />

    <target name="install-ivy-and-ivyde" depends="put-ivy-jar,generate-ivy-feature,put-ivyde-jars,get-ivyde-version,generate-site" description="Install Ivy and IvyDE into the updatesite" />

    <!-- 
        ===================================================================================================================
    	Targets to manage the updatesite
        ===================================================================================================================    
      -->
    <target name="optimize-ivy" depends="pack-ivy-jars,build-digest" description="Optimize the update site for an Ivy release" />

    <target name="optimize-ivyde" depends="pack-ivyde-jars,build-digest" description="Optimize the update site for an IvyDE release" />

    <target name="optimize" depends="pack-jars,build-digest" />

    <target name="prepare-pack-ivy-jars">
        <!-- prepare the working area, so copy plugin jars -->
        <mkdir dir="${work.dir}/updatesite/" />
        <copy todir="${work.dir}/updatesite">
            <fileset dir="${updatesite.dir}">
                <include name="plugins/org.apache.ivy_*.jar" />
            </fileset>
        </copy>
    </target>

    <target name="prepare-pack-ivyde-jars">
        <!-- prepare the working area, so copy plugin jars -->
        <mkdir dir="${work.dir}/updatesite/" />
        <copy todir="${work.dir}/updatesite">
            <fileset dir="${updatesite.dir}">
                <include name="plugins/org.apache.ivyde.*.jar" />
            </fileset>
        </copy>
    </target>

    <target name="do-pack-jars" depends="eclipse-classpath">
        <!-- launch the packing -->
        <java classpath="${eclipse.classpath}" classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
            <arg value="-consolelog" />
            <arg line="-application org.eclipse.update.core.siteOptimizer" />
            <arg line="-jarProcessor -verbose -processAll -pack" />
            <arg line="-outputDir ${work.dir}/updatesite/plugins" />
            <arg line="${work.dir}/updatesite/plugins" />
        </java>
        <!-- put the packs back to the updatesite -->
        <copy todir="${updatesite.dir}">
            <fileset dir="${work.dir}/updatesite">
                <include name="plugins/*.jar.pack.gz" />
            </fileset>
        </copy>
    </target>

    <target name="pack-ivy-jars" depends="prepare-pack-ivy-jars,do-pack-jars" />

    <target name="pack-ivyde-jars" depends="prepare-pack-ivyde-jars,do-pack-jars" />

    <target name="pack-jars" depends="prepare-pack-ivy-jars,prepare-pack-ivyde-jars,do-pack-jars" />

    <target name="build-digest" depends="eclipse-classpath">
        <java classpath="${eclipse.classpath}" classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
            <arg value="-consolelog" />
            <arg line="-application org.eclipse.update.core.siteOptimizer" />
            <arg line="-digestBuilder -digestOutputDir=${updatesite.dir}" />
            <arg line="-siteXML=${updatesite.dir}/site.xml" />
        </java>
        <!-- make the eclipse generated digest ASF compliant -->
        <!-- first let's add a ASL2 header -->
        <mkdir dir="${work.dir}/digest" />
        <unzip src="${updatesite.dir}/digest.zip" dest="${work.dir}/digest" />
        <loadfile property="asl2-header.xml" srcfile="${basedir}/ASL2-header.xml" />
        <move file="${work.dir}/digest/digest.xml" tofile="${work.dir}/digest-generated.xml" />
        <copy file="${work.dir}/digest-generated.xml" tofile="${work.dir}/digest/digest.xml">
            <filterchain>
                <tokenfilter>
                    <replacestring from="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;" to="${asl2-header.xml}" />
                </tokenfilter>
            </filterchain>
        </copy>
        <!-- add notice and license -->
        <copy todir="${work.dir}/digest">
            <fileset dir="${basedir}">
                <include name="NOTICE" />
                <include name="LICENSE" />
            </fileset>
        </copy>
        <!-- repackage it -->
        <zip basedir="${work.dir}/digest" destfile="${updatesite.dir}/digest.zip" />
    </target>

    <target name="checksum" description="Compute the checksum for every artifact to distribute">
        <checksum algorithm="MD5" fileext=".md5" format="MD5SUM">
            <fileset dir="${updatesite.dir}">
                <include name="plugins/org.apache.ivy*.jar" />
                <include name="plugins/org.apache.ivy*.jar.pack.gz" />
                <include name="features/org.apache.ivy*.jar" />
                <include name="digest.zip" />
            </fileset>
        </checksum>
        <checksum algorithm="SHA" fileext=".sha" format="MD5SUM">
            <fileset dir="${updatesite.dir}">
                <include name="plugins/org.apache.ivy*.jar" />
                <include name="plugins/org.apache.ivy*.jar.pack.gz" />
                <include name="features/org.apache.ivy*.jar" />
                <include name="digest.zip" />
            </fileset>
        </checksum>
    </target>

    <target name="verify-checksum" description="Verify the checksums of the artifacts to publish">
        <checksum algorithm="MD5" fileext=".md5" format="MD5SUM" verifyproperty="checksum.md5.ok">
            <fileset dir="${updatesite.dir}">
                <include name="plugins/org.apache.ivy*.jar" />
                <include name="plugins/org.apache.ivy*.jar.pack.gz" />
                <include name="features/org.apache.ivy*.jar" />
                <include name="digest.zip" />
            </fileset>
        </checksum>
        <fail message="MD5 Checksum verify failed !">
            <condition>
                <isfalse value="${checksum.md5.ok}" />
            </condition>
        </fail>
        <echo message="MD5 Checksum verify passed successfully" />
        <checksum algorithm="SHA" fileext=".sha" format="MD5SUM" verifyproperty="checksum.sha.ok">
            <fileset dir="${updatesite.dir}">
                <include name="plugins/org.apache.ivy*.jar" />
                <include name="plugins/org.apache.ivy*.jar.pack.gz" />
                <include name="features/org.apache.ivy*.jar" />
                <include name="digest.zip" />
            </fileset>
        </checksum>
        <fail message="SHA Checksum verify failed !">
            <condition>
                <isfalse value="${checksum.sha.ok}" />
            </condition>
        </fail>
        <echo message="SHA Checksum verify passed successfully" />
    </target>

    <!-- 
        ===================================================================================================================
        Targets dedicated to be used by Hudson
        
        The 'hudson-prepare' have to be launched first in its own ant call: it will setup build properties
        Then 'hudson-build' will do build the updatesite (it has to be called in a separate ant call from 'hudson-prepare')
        ===================================================================================================================    
      -->

    <target name="hudson-prepare" depends="hudson-prepare-eclipse">
        <!-- we don't want to modify the checked in updatesite, so we will make it build in another place -->
        <echo file="local.build.properties">
updatesite.dir=${basedir}/build
mirrors.url=
updatesite.url=http://hudson.zones.apache.org/hudson/view/Ant/job/IvyDE-updatesite/lastSuccessfulBuild/artifact/trunk/build
baseLocation=${basedir}/${hudson.eclipse.name}
</echo>
        <delete dir="${basedir}/build" />
    </target>

    <target name="hudson-prepare-eclipse" depends="hudson-get-eclipse,hudson-unzip-eclipse" />

    <target name="hudson-check-download-eclipse">
        <condition property="hudson.eclipse.downloaded">
            <available file="${hudson.eclipse.name}.zip" />
        </condition>
    </target>

    <target name="hudson-get-eclipse" depends="hudson-check-download-eclipse" unless="hudson.eclipse.downloaded">
        <get src="${hudson.eclipse.url}" dest="${hudson.eclipse.name}.zip" verbose="yes" />
    </target>

    <target name="hudson-check-unzip-eclipse">
        <condition property="hudson.eclipse.unzipped">
            <available file="${hudson.eclipse.name}" />
        </condition>
    </target>

    <target name="hudson-unzip-eclipse" depends="hudson-check-unzip-eclipse" unless="hudson.eclipse.unzipped">
        <unzip src="${hudson.eclipse.name}.zip" dest="${basedir}" />
        <move file="eclipse" tofile="${hudson.eclipse.name}" />
    </target>

    <target name="hudson-find-ivy-jar">
        <property name="ivy.jar" value="${basedir}/../../../Ivy/lastSuccessful/archive/trunk/build/artifact/jars/ivy.jar" />
    </target>

    <target name="hudson-find-ivyde-zip">
        <path id="ivyde.zip.id">
            <first count="1">
                <fileset dir="${basedir}/../../../IvyDE/lastSuccessful/archive/trunk/dist/" includes="apache-ivyde-2*.zip" />
            </first>
        </path>
        <property name="ivyde.zip" refid="ivyde.zip.id" />
    </target>

    <target name="hudson-build" depends="clean,hudson-find-ivy-jar,hudson-find-ivyde-zip,install-ivy-and-ivyde,optimize,checksum" />

</project>
