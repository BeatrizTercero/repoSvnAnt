<!--
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<project name="apache-ivyde-updatesite">

    <property file="local.build.properties" />
    <property file="build.properties" />
    <property environment="env" />

    <property name="work.dir" value="${basedir}/work" />
    <property name="dist.dev.dir" value="${basedir}/dist/dev" />
    <property name="dist.release.dir" value="${basedir}/dist/release" />

    <target name="clean" description="Clean the folders generated during the build">
        <delete dir="${work.dir}" />
    </target>

    <!-- ==================================================================================
        Targets to intialize an ant run with Eclipse. Will be used to manage the updatesite
        ===================================================================================
      -->

    <target name="eclipse-startup-check">
        <fail message="An Eclipse install is needed to run the build. Set your Eclipse install dir into the baseLocation property." unless="baseLocation" />

        <condition property="eclipse.startup">
            <available file="${baseLocation}/startup.jar" />
        </condition>
    </target>

    <target name="eclipse-startup-classpath" depends="eclipse-startup-check" if="eclipse.startup">
        <property name="eclipse.classpath" value="${baseLocation}/startup.jar" />
    </target>

    <target name="eclipse-launcher-classpath" depends="eclipse-startup-check" unless="eclipse.startup">
        <!-- store path to newest launcher JAR in path id 'newest.equinox.launcher.path.id' -->
        <path id="newest.equinox.launcher.path.id">
            <first count="1">
                <sort>
                    <fileset dir="${baseLocation}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
                    <!-- Seems the default order is oldest > newest so we must reverse it.
                       The 'reverse' and 'date' comparators are in the internal antlib
                       org.apache.tools.ant.types.resources.comparators.
                    -->
                    <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                        <!-- 'date' inherits 'reverse's namespace -->
                        <date />
                    </reverse>
                </sort>
            </first>
        </path>

        <!-- turn the path into a property -->
        <property name="eclipse.classpath" refid="newest.equinox.launcher.path.id" />
    </target>

    <target name="eclipse-classpath" depends="eclipse-startup-classpath,eclipse-launcher-classpath">
        <echo message="Using equinox launcher jar: ${eclipse.classpath}" />
    </target>

    <macrodef name="osgi-version">
        <attribute name="jar" />
        <attribute name="outputproperty" />
        <sequential>
            <tstamp>
                <format property="tstamp.@{jar}" pattern="yyyyMMddhhmmss" locale="en,UK" />
            </tstamp>
            <property name="work.dir.@{jar}" value="${work.dir}/${tstamp.@{jar}}" />
            <mkdir dir="${work.dir.@{jar}}/jar" />
            <unzip overwrite="true" src="@{jar}" dest="${work.dir.@{jar}}" />
            <loadfile property="@{outputproperty}" srcFile="${work.dir.@{jar}}/META-INF/MANIFEST.MF">
                <filterchain>
                    <linecontains>
                        <contains value="Bundle-Version:" />
                    </linecontains>
                    <tokenfilter>
                        <replaceregex pattern="Bundle-Version: (.*)" replace="\1" flags="gi" />
                    </tokenfilter>
                    <striplinebreaks />
                </filterchain>
            </loadfile>
            <delete dir="${work.dir.@{jar}}" />
        </sequential>
    </macrodef>

    <target name="build-main-p2-repo" description="Build the main P2 repository">
        <mkdir dir="${dist.release.dir}" />
        <loadfile property="ASL2-header" srcFile="${basedir}/ASL2-header.xml"/>

        <echo file="${dist.release.dir}/compositeArtifacts.xml"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<?compositeArtifactRepository version='1.0.0'?>
${ASL2-header}
<repository name='Apache IvyDE Repository' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1.0.0'>
  <properties size='1'>
    <property name='p2.compressed' value='false'/>
  </properties>
]]></echo>
        <concat append="true" destfile="${dist.release.dir}/compositeArtifacts.xml">
            <fileset dir="${basedir}" includes="versions.xml" />
        </concat>
        <echo append="true" file="${dist.release.dir}/compositeArtifacts.xml"><![CDATA[</repository>
]]></echo>

        <echo file="${dist.release.dir}/compositeContent.xml"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<?compositeArtifactRepository version='1.0.0'?>
${ASL2-header}
<repository name='Apache IvyDE Repository' type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository' version='1.0.0'>
  <properties size='1'>
    <property name='p2.compressed' value='false'/>
  </properties>
]]></echo>
        <concat append="true" destfile="${dist.release.dir}/compositeContent.xml">
            <fileset dir="${basedir}" includes="versions.xml" />
        </concat>
        <echo append="true" file="${dist.release.dir}/compositeContent.xml"><![CDATA[</repository>
]]></echo>
    </target>

    <!-- ========================================
        Targets related to the P2 repo for IvyDE
        ========================================
    -->

    <target name="build-ivyde-p2-repo" depends="generate-ivyde-p2-repo,checksum-ivyde" description="Build a P2 repository from an IvyDE distribution">
    </target>

    <target name="generate-ivyde-p2-repo" description="Build a P2 repository from an IvyDE distribution">
        <fail message="You have to specify the path to the zip of the IvyDE distribution via the property ivyde.zip" unless="ivyde.zip" />
        <!-- unzip -->
        <delete dir="${work.dir}/ivyde" />
        <mkdir dir="${work.dir}/ivyde" />
        <unzip src="${ivyde.zip}" dest="${work.dir}/ivyde" />
        <!-- get the path to the ivyde folder -->
        <path id="ivyde.distrib.path.id">
            <first count="1">
                <dirset dir="${work.dir}/ivyde" includes="*" />
            </first>
        </path>
        <!-- turn the path into a property -->
        <property name="ivyde.distrib.path" refid="ivyde.distrib.path.id" />
        <!-- get the path to the ivyde jar -->
        <path id="ivyde.jar.path.id">
            <first count="1">
                <fileset dir="${ivyde.distrib.path}/plugins" includes="org.apache.ivyde.eclipse_*.jar" />
            </first>
        </path>
        <!-- turn the path into a property -->
        <property name="ivyde.jar.path" refid="ivyde.jar.path.id" />
        <!-- get the version of ivyde -->
        <osgi-version jar="${ivyde.jar.path}" outputproperty="ivyde.version" />
        <!-- install the new binaries -->
        <delete dir="${dist.dev.dir}/ivyde-${ivyde.version}" />
        <mkdir dir="${dist.dev.dir}/ivyde-${ivyde.version}" />
        <copy todir="${dist.dev.dir}/ivyde-${ivyde.version}">
            <fileset dir="${ivyde.distrib.path}">
                <include name="plugins/**" />
                <include name="features/**" />
                <include name="*.xml" />
            </fileset>
        </copy>
        <xslt in="${ivyde.distrib.path}/artifacts.xml" out="${dist.dev.dir}/ivyde-${ivyde.version}/artifacts.xml" style="${basedir}/p2-mirrors.xsl" force="true">
          <param name="path" expression="ivyde-${ivyde.version}" />
        </xslt>
    </target>

    <target name="checksum-ivyde" description="Compute the checksum for every artifact to distribute">
        <checksum algorithm="MD5" fileext=".md5" format="MD5SUM">
            <fileset dir="${dist.dev.dir}/ivyde-${ivyde.version}">
                <include name="plugins/*.jar" />
                <include name="features/*.jar" />
            </fileset>
        </checksum>
        <checksum algorithm="SHA" fileext=".sha" format="MD5SUM">
            <fileset dir="${dist.dev.dir}/ivyde-${ivyde.version}">
                <include name="plugins/*.jar" />
                <include name="features/*.jar" />
            </fileset>
        </checksum>
    </target>

    <!-- ======================================
        Targets related to the P2 repo for Ivy
        ======================================
    -->

    <target name="build-ivy-p2-repo" depends="get-ivy-plugin,generate-ivy-feature,generate-ivy-ant-feature,generate-ivy-ant-plugin,generate-ivy-p2-repo,generate-ivy-p2-category,add-ivy-p2-mirrors,checksum-ivy" description="Build a P2 repository from an Ivy distribution">
    </target>

    <target name="get-ivy-plugin">
        <fail message="You have to specify the path to the jar via the property ivy.jar" unless="ivy.jar" />
        <!-- get the real OSGi version of the bundle -->
        <osgi-version jar="${ivy.jar}" outputproperty="ivy.version" />
        <!-- install the plugin -->
        <delete dir="${dist.dev.dir}/ivy-${ivy.version}/plugins" />
        <mkdir dir="${dist.dev.dir}/ivy-${ivy.version}/plugins" />
        <copy file="${ivy.jar}" tofile="${dist.dev.dir}/ivy-${ivy.version}/plugins/org.apache.ivy_${ivy.version}.jar" overwrite="true" />
    </target>

    <target name="generate-ivy-feature" depends="get-ivy-plugin">
        <!-- now take care of the generation of the Ivy feature -->
        <!-- first generate a feature descriptor with the proper version -->
        <delete file="${work.dir}/feature.xml" />
        <copy file="ivy-feature-template/feature.xml" todir="${work.dir}">
            <filterset>
                <filter token="ivy.version" value="${ivy.version}" />
            </filterset>
        </copy>
        <!-- package the feature -->
        <mkdir dir="${dist.dev.dir}/ivy-${ivy.version}/features" />
        <jar destfile="${dist.dev.dir}/ivy-${ivy.version}/features/org.apache.ivy.feature_${ivy.version}.jar">
            <fileset dir="${basedir}/ivy-feature-template">
                <include name="feature.properties" />
                <include name="LICENSE" />
                <include name="NOTICE" />
            </fileset>
            <fileset dir="${work.dir}">
                <include name="feature.xml" />
            </fileset>
        </jar>
    </target>

    <target name="generate-ivy-ant-feature" depends="get-ivy-plugin">
        <!-- now take care of the generation of the Ivy Ant feature -->
        <!-- first generate a feature descriptor with the proper version -->
        <delete file="${work.dir}/feature.xml" />
        <copy file="${basedir}/ivy-ant-feature-template/feature.xml" todir="${work.dir}">
            <filterset>
                <filter token="ivy.version" value="${ivy.version}" />
            </filterset>
        </copy>
        <!-- package the feature -->
        <mkdir dir="${dist.dev.dir}/ivy-${ivy.version}/features" />
        <jar destfile="${dist.dev.dir}/ivy-${ivy.version}/features/org.apache.ivy.eclipse.ant.feature_${ivy.version}.jar">
            <fileset dir="${basedir}/ivy-ant-feature-template">
                <include name="feature.properties" />
                <include name="LICENSE" />
                <include name="NOTICE" />
            </fileset>
            <fileset dir="${work.dir}">
                <include name="feature.xml" />
            </fileset>
        </jar>
    </target>

    <target name="generate-ivy-ant-plugin" depends="get-ivy-plugin">
        <fail message="You have to specify the path to the jar via the property ivy.jar" unless="ivy.jar" />
        <delete dir="${work.dir}/ivy-ant-plugin" />
        <!-- put the jar of Ivy -->
        <copy file="${ivy.jar}" tofile="${work.dir}/ivy-ant-plugin/ivy.jar" />
        <!-- get the antlib.xml and produce a plugin.xml with it -->
        <mkdir dir="${work.dir}/ivy-ant-plugin/ivyjar" />
        <unzip src="${ivy.jar}" dest="${work.dir}/ivy-ant-plugin/ivyjar" />
        <style in="${work.dir}/ivy-ant-plugin/ivyjar/org/apache/ivy/ant/antlib.xml" out="${work.dir}/ivy-ant-plugin/plugin.xml" style="ivy-ant-plugin/antlib2plugin.xsl" />
        <!-- put the manifest with the correct version -->
        <copy file="${basedir}/ivy-ant-plugin/MANIFEST.MF" todir="${work.dir}/ivy-ant-plugin">
            <filterset>
                <filter token="VERSION" value="${ivy.version}"/>
            </filterset>
        </copy>
        <!-- package the jar -->
        <jar destfile="${dist.dev.dir}/ivy-${ivy.version}/plugins/org.apache.ivy.eclipse.ant_${ivy.version}.jar" manifest="${work.dir}/ivy-ant-plugin/MANIFEST.MF">
            <fileset dir="${work.dir}/ivy-ant-plugin">
                <include name="plugin.xml" />
                <include name="ivy.jar" />
            </fileset>
            <fileset dir="ivy-ant-plugin">
                <include name="LICENSE" />
                <include name="NOTICE" />
            </fileset>
        </jar>
    </target>

    <target name="generate-ivy-p2-repo" depends="eclipse-classpath,get-ivy-plugin">
        <makeurl file="${dist.dev.dir}/ivy-${ivy.version}" property="p2repo.url"/>
        <java classpath="${eclipse.classpath}" classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
            <arg line="-clean" />
            <arg line="-application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
            <arg line="-metadataRepository ${p2repo.url}" />
            <arg line="-artifactRepository ${p2repo.url}" />
            <arg line="-metadataRepositoryName 'Apache Ivy P2 Eclipse repository'" />
            <arg line="-artifactRepositoryName 'Apache Ivy P2 Eclipse repository'" />
            <arg line="-source ${dist.dev.dir}/ivy-${ivy.version}" />
            <sysproperty key="eclipse.consoleLog" value="${eclipse.consoleLog}" />
        </java>        
    </target>

    <target name="generate-ivy-p2-category" depends="eclipse-classpath,get-ivy-plugin">
        <loadfile property="ASL2-header" srcFile="${basedir}/ASL2-header.xml"/>
        <echo file="${work.dir}/category.xml"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<site>
    <category-def name="org.apache.ivy.category" label="Apache Ivy library" />
    <feature url="features/org.apache.ivy.feature_${ivy.version}.jar" id="org.apache.ivy.feature" version="${ivy.version}">
        <category name="org.apache.ivy.category"/>
    </feature>
    <feature url="features/org.apache.ivy.eclipse.ant.feature_${ivy.version}.jar" id="org.apache.ivy.eclipse.ant.feature" version="${ivy.version}">
        <category name="org.apache.ivy.category"/>
    </feature>
</site>
]]></echo>
        <makeurl file="${dist.dev.dir}/ivy-${ivy.version}" property="p2repo.url"/>
        <makeurl file="${work.dir}/category.xml" property="p2repo.category.url"/>
        <java classpath="${eclipse.classpath}" classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
            <arg line="-clean" />
            <arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher" />
            <arg line="-metadataRepository ${p2repo.url}" />
            <arg line="-categoryDefinition ${p2repo.category.url}" />
            <arg line="-categoryQualifier" />
            <sysproperty key="eclipse.consoleLog" value="${eclipse.consoleLog}" />
        </java>
        <!-- as we're at it, let's put the ASL header -->
        <replaceregexp match="&lt;repository name='" replace="${ASL2-header}&lt;repository name='" flags="g">
            <fileset dir="${dist.dev.dir}/ivy-${ivy.version}" includes="*.xml" />
        </replaceregexp>
    </target>

    <target name="add-ivy-p2-mirrors" depends="generate-ivy-p2-repo">
        <copy file="${dist.dev.dir}/ivy-${ivy.version}/artifacts.xml" todir="${work.dir}" />
        <xslt in="${work.dir}/artifacts.xml" out="${dist.dev.dir}/ivy-${ivy.version}/artifacts.xml" style="${basedir}/p2-mirrors.xsl" force="true">
          <param name="path" expression="ivy-${ivy.version}" />
        </xslt>
    </target>

    <target name="checksum-ivy">
        <checksum algorithm="MD5" fileext=".md5" format="MD5SUM">
            <fileset dir="${dist.dev.dir}/ivy-${ivy.version}">
                <include name="plugins/*.jar" />
                <include name="features/*.jar" />
            </fileset>
        </checksum>
        <checksum algorithm="SHA" fileext=".sha" format="MD5SUM">
            <fileset dir="${dist.dev.dir}/ivy-${ivy.version}">
                <include name="plugins/*.jar" />
                <include name="features/*.jar" />
            </fileset>
        </checksum>
    </target>

    <!-- ======================================
        Generic targets
        ======================================
    -->

    <target name="verify-checksum" description="Verify the checksums of the artifacts to publish">
        <checksum algorithm="MD5" fileext=".md5" format="MD5SUM" verifyproperty="checksum.md5.ok">
            <fileset dir="${dist.dev.dir}">
                <include name="*/plugins/*.jar" />
                <include name="*/features/*.jar" />
            </fileset>
        </checksum>
        <fail message="MD5 Checksum verify failed !">
            <condition>
                <isfalse value="${checksum.md5.ok}" />
            </condition>
        </fail>
        <echo message="MD5 Checksum verify passed successfully" />
        <checksum algorithm="SHA" fileext=".sha" format="MD5SUM" verifyproperty="checksum.sha.ok">
            <fileset dir="${dist.dev.dir}">
                <include name="*/plugins/*.jar" />
                <include name="*/features/*.jar" />
            </fileset>
        </checksum>
        <fail message="SHA Checksum verify failed !">
            <condition>
                <isfalse value="${checksum.sha.ok}" />
            </condition>
        </fail>
        <echo message="SHA Checksum verify passed successfully" />
    </target>

    <!-- 
        ===================================================================================================================
        Targets dedicated to be used by Jenkins
        
        The 'jenkins-prepare' have to be launched first in its own ant call: it will setup build properties
        Then 'jenkins-build' will do build the updatesite (it has to be called in a separate ant call from 'jenkins-prepare')
        ===================================================================================================================    
      -->

    <target name="jenkins-prepare" depends="jenkins-prepare-eclipse">
        <!-- we don't want to modify the checked in updatesite, so we will make it build in another place -->
        <echo file="local.build.properties">
dist.dev.dir=${basedir}/build
dist.release.dir=${basedir}/build
mirrors.url=
updatesite.url=http://builds.apache.org/job/IvyDE-updatesite/lastSuccessfulBuild/artifact/trunk/build
baseLocation=${basedir}/dependencies/${jenkins.eclipse.name}
</echo>
        <delete dir="${basedir}/build" />
    </target>

    <target name="jenkins-prepare-eclipse" depends="jenkins-get-eclipse,jenkins-unzip-eclipse" />

    <target name="jenkins-check-download-eclipse">
        <condition property="jenkins.eclipse.downloaded">
            <available file="${basedir}/dependencies/${jenkins.eclipse.name}.zip" />
        </condition>
    </target>

    <target name="jenkins-get-eclipse" depends="jenkins-check-download-eclipse" unless="jenkins.eclipse.downloaded">
        <mkdir dir="${basedir}/dependencies" />
        <get src="${jenkins.eclipse.url}" dest="${basedir}/dependencies/${jenkins.eclipse.name}.zip" verbose="yes" />
    </target>

    <target name="jenkins-check-unzip-eclipse">
        <condition property="jenkins.eclipse.unzipped">
            <available file="${basedir}/dependencies/${jenkins.eclipse.name}" />
        </condition>
    </target>

    <target name="jenkins-unzip-eclipse" depends="jenkins-check-unzip-eclipse" unless="jenkins.eclipse.unzipped">
        <unzip src="${basedir}/dependencies/${jenkins.eclipse.name}.zip" dest="${basedir}/dependencies" />
        <move file="${basedir}/dependencies/eclipse" tofile="${basedir}/dependencies/${jenkins.eclipse.name}" />
    </target>

    <target name="jenkins-find-ivy-jar">
        <get src="${jenkins.baseUrl}/job/Ivy/lastSuccessfulBuild/artifact/trunk/build/artifact/jars/ivy.jar" dest="${basedir}/dependencies/ivy-jenkins.jar" verbose="yes" />
        <property name="ivy.jar" value="${basedir}/dependencies/ivy-jenkins.jar" />
    </target>

    <target name="jenkins-find-ivyde-zip">
        <!-- get the last successful version -->
        <get src="${jenkins.baseUrl}/job/IvyDE/lastSuccessfulBuild/artifact/trunk/dist/version.properties" dest="${basedir}/dependencies/ivyde-jenkins-version.properties" verbose="yes" />
        <property file="${basedir}/dependencies/ivyde-jenkins-version.properties" />
        <!-- get the actual zip -->
        <get src="${jenkins.baseUrl}/job/IvyDE/lastSuccessfulBuild/artifact/trunk/dist/apache-ivyde-${ivyde.build.version}.zip" dest="${basedir}/dependencies/apache-ivyde-jenkins.zip" verbose="yes" />
        <property name="ivyde.zip" value="${basedir}/dependencies/apache-ivyde-jenkins.zip" />
    </target>

    <target name="build-jenkins-p2-repo">
        <mkdir dir="${dist.release.dir}" />
        <script language="javascript">project.setProperty("timestamp",java.lang.System.currentTimeMillis());</script>
        <loadfile property="ASL2-header" srcFile="${basedir}/ASL2-header.xml"/>

        <echo file="${dist.release.dir}/compositeArtifacts.xml"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<?compositeArtifactRepository version='1.0.0'?>
${ASL2-header}
<repository name='Apache IvyDE Repository' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1.0.0'>
  <properties size='2'>
    <property name='p2.timestamp' value='${timestamp}'/>
    <property name='p2.compressed' value='false'/>
  </properties>
  <children size='2'>
    <child location='ivy-${ivy.version}'/>
    <child location='ivyde-${ivyde.build.version}'/>
  </children>
</repository>
]]></echo>
        <echo file="${dist.release.dir}/compositeContent.xml"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<?compositeArtifactRepository version='1.0.0'?>
${ASL2-header}
<repository name='Apache IvyDE Repository' type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository' version='1.0.0'>
  <properties size='2'>
    <property name='p2.timestamp' value='${timestamp}'/>
    <property name='p2.compressed' value='false'/>
  </properties>
  <children size='2'>
    <child location='ivy-${ivy.version}'/>
    <child location='ivyde-${ivyde.build.version}'/>
  </children>
</repository>
]]></echo>
    </target>

    <target name="jenkins-build" depends="clean,jenkins-find-ivy-jar,jenkins-find-ivyde-zip,build-ivy-p2-repo,build-ivyde-p2-repo,build-jenkins-p2-repo" />

</project>